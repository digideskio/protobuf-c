#summary Protocol-Buffer Service C Mapping

= Introduction =

Protocol-Buffers defines a mapping for a Service, which boils down to list of methods, each having:
  * a name
  * an input message type
  * an output message type

The C binding protobuf-c defines a C structure, ProtobufCService, which is the basis for both
  * services generated by protoc-c (the protobuf C code generator)
  * services implemented by RPC systems (protobuf-c-rpc is an example)

When using the code generator, the service is "derived" from ProtobufCService like this:
 
{{{ 
 typedef struct _Foo__DirLookup_Service Foo__DirLookup_Service;
 struct _Foo__DirLookup_Service
 {
  ProtobufCService base;
  void (*by_name)(Foo__DirLookup_Service *service,
                  const Foo__Name *input,
                  Foo__LookupResult_Closure closure,
                  void *closure_data);
 };
}}}
We generate two macros:
   * `FOO__DIR_LOOKUP__BASE_INIT` which defines merely the functions for `base`.  It looks like:
{{{
#define FOO__DIR_LOOKUP__BASE_INIT \
    { &foo__dir_lookup__descriptor, protobuf_c_service_invoke_internal, NULL }
}}}
   * `FOO__DIR_LOOKUP__INIT(function_prefix__)` which assumes that all the methods required by this service are `function_prefix__` followed by the method name.  It looks like:
{{{
#define FOO__DIR_LOOKUP__INIT(function_prefix__) \
    { FOO__DIR_LOOKUP__BASE_INIT,\
      function_prefix__ ## by_name  }
}}}

= RPC Implementations =
RPC Implementation take advantage of the fact that all methods are marshalled through the `invoke` method of `ProtobufCService`:
{{{
struct _ProtobufCService
{
  const ProtobufCServiceDescriptor *descriptor;
  void (*invoke)(ProtobufCService *service,
                 unsigned          method_index,
                 const ProtobufCMessage *input,
                 ProtobufCClosure  closure,
                 void             *closure_data);
  void (*destroy) (ProtobufCService *service);
};
}}}


= Destruction =
The macros assume you don't need a destructor for this service.  That may be naive... so you must set the `destroy` function of `ProtobufCService`  before supplying the `ProtobufCService` to naive code that expects `destroy` to be adequate (or NULL to do nothing).